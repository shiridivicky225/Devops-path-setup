Config
git config --global user.name "<user name>"   --> to configure user name
git config --global user.email "<user email>" --> to configure user email
git config --list                             --> to check configurations

git init --> initializing local git repo
git clone <repo url> --> to clone new repository

git status --> to know status of git local repo

git add <file name> --> to add files from Workspace to index area
git reset HEAD <file name> --> to take changes back from index area to WS
git checkout <file name> --> to discard changes in WS with Local repo

git add --all       --> to add more than 1 files from workspace to index area
git commit -m "<comments>" --> to commit changes from index area to local repo
git commit -a -m "<comments>" --> to add changes into index and commit to local repo at a time
git push origin <branch name> --> to push changes from local repo to central repo (Same branch)
git push --force origin <local branch>:<remote branch> --> to push changes from local to remote (different branch)
git pull origin <branch name> or git pull --> to pull changes from remote repo to local repo (same branch)
git pull origin -u <branch name> --> to pull changes from remote repo to local repo (different branch)

git branch --> to list local repo branches
git branch <branch name> --> to create new branch in local repo

git checkout <file name> --> to revert work space chnages
git checkout <branch name> --> to change branch
git checkout -b <branch name> --> to pull new branch from remote repo

merge : if you want to merge A branch to B branch (A --> B), then you should be in B Branch
        git merge A  --> git merge <from branch name>

Rebase: if you want to perform rebase(changing base of a branch) for a particular branch, then you should be
        in same branch
        eg: i want to change base of b15 branch, then i should be in b15 branch
        apply command: git rebase <base branch name>

logs   
git log   --> gives all commits info for all files
git log <file name> --> give commits info for particular file
git log --oneline --> give all commits info (short commit id & commit comments)
git log -p --> all commit info

git diff <commit id1>..<commit id2> --> we can compare code diff b/w 2 commits
git show <commit id> --> it compares with its previous and gives code diff
     commit id20
     commit id19

         
revert
reset
tags

git branch -d <branch name> --> to delete branch with/After Merge on local repo
git branch -D <branch name> --> to delete branch without merge on local repo
git push origin --delete <branch name> --> to delete branch on remote repo

----------------- GITHUB/GITLAB -----------------------
Password less communication will happen on key basis
In Git client Machine, Generate SSH key's
Normally ssh key will be generated by using --> ssh-keygen
But in Git user communication happens  on user basis. so, user below command
--> ssh-keygen -t rsa -C "<git user mail id>"
You can find keys (public & private) in below path
--> /<user home dir>/.ssh/id_rsa.pub 
Copy public key
--> cat /<user home dir>/.ssh/id_rsa.pub
Copy key
Login to github acc --> Goto Profile --> Settings --> SSH keys --> paste copied key
In git client, execute below command
git remote -v
you will find remote repo url (you will see http clone url. NOT ssh clone url)
Copy SSH clone url from github central repo, execute below url
--> git remote set-url origin <repo ssh url>